SSR (Server Side Rendering) 
화면의 렌더링이 서버에서 이루어지는 아키텍처 

SPA(Single Page Application) 
하나의 페이지를 사용하는 어플리케이션

Ajax( 페이지 새로고침 없이 데이터가 교환되고 업데이트)

사용자와의 상호작용을 위해    
사용자 중심 경험(User-centric Experience)을 제공하기 위해 
웹프레임워크를 사용한다. 

프레임워크를 사용하면 우리는 무엇이 이득인가?
일반 작업이나 공통 패턴을 추상화 해서 제공하기 때문에
빠르고 정확하게 원하는 앱을 구현하고 운영 및 유지 보수가 가능하다.


Vue.js 란? 
데이터를 보여주는 뷰(view)
데이터를 중개하는 뷰모델 (view-model) 
UI와 데이터 처리 로직의 상호 의존성을 줄이는 패턴인 MVVM 적용 하여 
뷰, 뷰모델, 모델을 독립적으로 모듈화하여 재사용성을 높일 수 있는
애플리케이션을 설계할 수 있다. 

데이터를 처리하는 모델(model)



sudo npm install -g @vue/cli 

뷰 어플리케이션을 만드는 방법 2가지 
- CDN(Content Delivery Network) 
  HTML 기반에서 뷰 어플리케이션을 생성할때 유용함 
  <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
- NPM(Node Package Manger)
  npm create vue@latest 
  Vue의 최신 버전으로 뷰 프젝젝트를 설정하여 생성하겠다. 
  초기 프로젝트를 구성하는 것을 스캐폴딩 (뷰의 뼈대를 세운다.) 



CDN, NPM 
================================================ day01 오전 학습정리 

0. SSR 방식과 SPA 방식의 원리와 차이점 

1. Vue.js 정의 
 
2. Vue.js 채택의 이유 

3. Vue.js 동작원리와 특징 

4. Vue.js 개발환경 설정 
   -CDN
   -NPM 

===================================
1. 뷰 어플리케이션의 기본 구조 

   - package.json
     가장 중심이 되는 파일
     뷰 app에서 사용되는 기본정보, 의존성 모듈정보, 스크립트 명령어 정보 저장되어 있다.
 {
  "name": "vue-project",      //뷰 app 이름 
  "version": "0.0.0",         //[major.minor.patch]  
                              //major:하위 호환성이 없는 변경사항이 있을때 증가
                              //minor: 하위 호환성이 있는 기능이 추가되거나 변경될때 증가
                              //patch : 버그 나 작은 수정 사항이 있을때 증가 
  "private": true,            //뷰 app의 공개 여부를 의미하는 논리형 값 
  "type": "module",           
  "scripts": {               // 뷰 app에서 빌드하거나 실행할 수 있는 명령어를 등록 부분: npm run dev 
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {       //뷰 app 을 실행할때 필요한 의존성 모듈을 정의하는 부분 
    "vue": "^3.5.11"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^5.1.4",   //뷰 app 개발할때 필요한 의존성 모듈을 정의한 부분   npm install 패키지명 [--save, --save-dev]
    "vite": "^5.4.8"
  }
 }
 ==============================================================================================
   - index.HTML 
     npm run dev 명령어를 입력하면 개발 서버가 구동이 된다. 
     개발 서버가 구동이 되면서 가장 먼저 index.html 을 서버에 load 한다. 

   - main.js 
=====================================   
   - App.vue 
     확장자가 vue인 파일을 뷰에서는 SFC(Single File Component), 컴포넌트(Component)
     뷰 app은 컴포넌트들을 여러개 생성하면서 어플리케이션을 만든다. 
     App.vue 는 이들의 루트(root) 컴포넌트이다. (최초로 진입하는 가장 상위에 있는 컴포넌트)

     <script></script>
     <template></template>
     <style></style>
     태그로 영역을 구분한다. 

 ==========================================================
 2. 뷰 어플리케이션 인스턴스 
     뷰 패키지의 구조와 기능을 뷰 어플리케이션에서 사용할 수 있게 하는 진입점 역할을 한다. 
     뷰의 근간은 자바스크립트이다. (객체지향언어)
         
    
    뷰는 SFC 기본구조 : App.vue 가 SFC이다. (인스턴스의 구성요소의 설정 정보) 
    인스턴스를 생성할 때 SFC 파일을 createApp()함수의 매개변수로 전달하면
    SFC 파일의 설정 정보를 가져와서 인스턴스를 생성한다. 

    <script></script> 선택가능
    : SFC 파일에서 사용할 로직을 자바스크립트로 작성한다. 
      문법 규칙을 지켜서 코드 구성해야한다. 
      옵션스 API를 지켜서 작성해야 한다. 

    <template> 1개 이상 반드시 필요
    HTML 코드 작성 영역. 
      
    <style></style> 선택
     <template></template>영역에서 작성한 구성 요소에 대해 CSS 스타일을 적용하기 위한 영역 


 1.VUE/
       ./cdn-vue
       ./class
       ./npm-vue
       ./grammer-vue
      (1) grammer-vue 실습디렉토리 생성 
      (2) grammer-vue 뷰 어플리케이션을 생성 
      (3) grammer-vue 필요한 패키지를 설치 (npm 이용)
      (4) src/main.js 파일을 열어주시고 기다려 주세요 
          
 
----------------------------------------------------------
2. 디렉티브 사용하기 
<script></script> 태그 영역에서 정의한 data 옵션 속성을 <template></template>태그 영역에서
사용할 수 있게 디렉티브 를 사용한다.
v- 접두사 로 시작하고 뷰에서만 사용하는 문법이다. 

(1) v-html  디렉티브는 데이터에 포함된 HTML태그를 인식해서 렌더링하므로
    XSS(Cross-Site Scripting) 공격에 취약하여, 사용자가 입력한 데이터를 출력할때는 사용하지 말것
(2) v-text 

(3) v-pre 
    컴파일할때 <template></template>영역을 건너뛰게 하는 디렉디브이다. 
    뷰는 SFC파일의 template 태그를 런타임 이나 빌드 과정에서 컴파일한다. 
    초기 랜더링 성능 향상을 위해 SFC 파일의 template태그 영역에 뷰 문법이 
    사용되지 않으면 컴파일 할 필요가 없으므로 v-pre 디렉티브를 추가해 컴파일을 스킵한다. 

(4) v-bind 
    HTML 태그의 콘텐츠가 아니라 속성에 데이터를 연결하고 싶을때 v-bind를 사용해야 한다. 
    v-bind 디렉티브는 항상 HTML 속성앞에 : 을 붙여서 표시한다. 
    HTML 속성과 데이터를 연결할 수 있다. 

(5) v-if/v-else-if/v-else 
   template 태그 영역안에서 조건부 렌더링 기능을 구현할때 사용하는 디렉티브이다. 
   조건에 맞지 않는 요소는 아예 렌더링하지 않는다. 조건이 자주 변경되지 않을때, v-if 유리한다. 

(6) v-show 
    조건과 상관없이 무조건 랜더링하고 CSS display속성을 none으로 셋팅하여 화면에서만 감춘다.
    요소를 다시 그려야 하는 부담이 없으므로 조건이 자주 변경되는 경우에 사용하면 유리하다. 

(7) v-cloak  : CDN 방식으로 렌더링할 경우 뷰 적용을 인위적으로 늦추기 위해 setTimeout() 메서드를 이용해서 delay를 지정한다.

(8) v-for :뷰에서 반복적으로 렌더링하는 HTML 요소를 생성하는 사용한다. 
    v-for="값 in 배열" key="고유값"
    v-for="(값 ,인덱스) in 배열" key="고유값" 

   