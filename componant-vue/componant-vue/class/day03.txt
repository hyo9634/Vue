뷰에서는 복잡한 구조를 보다 심플하고 유연하게 제공하기 위해
    컴퓨넌트, 슬롯, 데이터 공유 기술을 제공하고 있다.
    어플리케이션이 유연하고, 모듈화된 구조로 개발하고 관리하기 좋다.
    코드의 재사용성과 유지보수성 향상

    1. 컴포넌트
        자바스크립트 기반 프레임워크에서 컴포넌트들의 역할은 어플리케이션을 구성하고 관리하는 방식
        
        Vuejs 프레임워크는 컴포넌트 기반 아키텍처이다.
        특정 기능이나 작업을 독립적으로 수행하기 위한 논리적으로 구분된 코드 단위

        페이지 단위가 아니라 컴포넌트 단위로 설게하는 방식
        
        -장점 : 
            1. 재사용성 : 컴포넌트는 특정 기능이나 작업을 독립적으로 수행하는 단위이므로 같은 기능이다 작업이 필요한 곳에 재사용할 수 있다.
            2. 독립성 : 컴포넌트는 독립적으로 작동할 수 있어야 한다. 다른 컴포넌트에 영향을 주지 않고
                        수정이나 교체를 할 수 있어야 한다.
            3. 모듈성 : 웹 애플리케이션을 개별 단위로 구분하기 때문에 복잡성을 줄일 수 있다.
            4. 확장성 : 컴포넌트에서 구성 요소를 추가하거나 수정하여 새로운 동작이나 기능을 제공할 수 있다.
            5. 캡슐화 : 컴포넌트는 내부의 복잡성을 숨기고, 단순하게 기능만 사용할 수 있는 인터페이스를 제공한다.
                        컴포넌트의 내부 로직이나 상태 처리 로직을 알지 못해도 컴포넌트를 이용하여 화면을 구성 할 수 있다.
            컴포넌트 네이밍 컨벤션: (두 단어 이상으로 조합하는 파스칼케이스를 권장)-> 클래스 만들듯이 대문자로 시작
                                    ex. 지불기능 - PaymentList, UserInfo
    2. component 1개를 생성했다. : FirstChild.Vuejs 
        만든 컴포넌트를 뷰에서 사용하려면 컴포넌트 등록이 필요하다.
        컴포넌트 등록과정 2가지
            -전역(global) 등록
                컴포넌트를 뷰 app의 모든 곳에서 사용 할 수 있다.
                src/main.js에 등록

            -지역(local) 등록
                src/App.vue

    3. Life cycle Hook
        Vue.js 프레임 워크에서 컴포넌트가 생성되고 파괴될 때까지 여러 단계를 거치면서 특정 기능과 역할을 하는 함수를 호풀할 수 있도록 설계되어 있다.
        특정 기능과 역할을 하는 함수를 뷰에서는 훅(Hook) 이라고 한다.

        컴포넌트에서 호출되는 훅을 lifecycle hook 이라고 한다. 
        (실습) 라이프사이클 훅 호출

        App컴포넌트의 beforeUPdate() 호풀된 후, 리렌더링과 패치과정이 거치면서 FirstChild 컴포넌트가 DOM에서 제거되는 과정 확인
        FirstChild의 beforeUPdate(), unmounted() 훅이 호출되고, 훅이 호출되면 컴포넌트는 다시 마운트 상태에 진입한다.
    
    4. 템플릿 ref 속성
        뷰에서도 문서객체(DOM)를 참조할때나, 컴포넌트를 참조할 때 사용하는 속성

        뷰는 JS기반 프레임워크 <script></script> 태그에서 <template></template> 태그에 사용된 HTML 택의 문서 객체에 접근할 때
        document객체를 사용한다.

        h1태그에 innerText (h1태그이다)
        h1의 참조 값을 얻으려면 컴포넌트가 마운트 될때, 어플리케이션 인스턴스의 $refs 객체 속성으로 DOM참조가 저장됨
        저장된 참조는 $refs 객체에 접근해서 사용할 수 있다.
        주의할 점 : $refs로 dom에 대한 참조를 할때는 컴포넌트가 마운트된 후에 접근해야 한다.
        $refs의 참조 횟수 제한은 없다. 이름만 중복되지 않으면 됨.

    5. 컴포넌트의 속성과 이벤트 정의
        컴포넌트에 속성과 이벤트를 뷰에 정의할 수 있는데 사용자 정의 속성, 사용자 정의 이벤트를 만들어서 적용할 수 있다.

    6. 이벤트 <$emit>
        <template></template> 태그 영역에서 사용하는 HTML 태그에 v-on 디렉티브 (@축약형) 사용하면 특정 이벤트를 연결할 수 있었다.

        컴포넌트에게도 v-on 디렉티브로 이벤트를 사용할 수 있다.
        컴포넌트에서 사용하는 이벤트 타입은 하위 컴포넌트에서 부모 컴포넌트로 발신하는 이벤트를 
        수신하는 용도이기 때문에 사용자 정의 이벤트로 구현할 수 있다.

        컴포넌트에서 이벤트 핸들러
        부모 컴포넌트에서 사용자 정의 이벤트의 사용여부와 관계없이 모든 컴포넌트는 $emit() 내장 메서드를 사용하여 부모 컴포넌트로 이벤트를 발신할 수 있다.

        무분별한 이벤트 발신을 막기 위해 옵션스API emit속성을 사용해서 관리하도록 권장하고 있다.
        emits: ['Print Hello','login_process',...],
        지정한 발신이 아니면 경고창을 띄우도록 app.vue가 디펜스하고 문제를 발견할 수 있게끔

        부모 컴포넌트로 발신할 수 있는 이벤트 타입을 명시하여 뷰 app에서 자체적으로 검사할 수 있도록 

    7. 이벤트를 발신 argument, paramater $emit()내장 메서드는 부모 컴포넌트로 부터 이벤트를 발신할 때,
        첫번째 인자로 부모컴포넌트 이벤트 명시(필수)
        두번째 인자로 값을 지정하면 부모컴포넌트 이벤트 매개변수로 값을 전달할 수 있다.

    8. 컴포넌트 구분 없이 모든 컴포넌트에 데이터를 공유하고 싶으면
        App-Level provide 기능을 사용해야 한다. 
        main.js 파일에서 provide 기능을 사용하라는 의미임
    
    