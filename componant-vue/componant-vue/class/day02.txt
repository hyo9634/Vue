자바스크립트의 event
document 객체 (ex. body태그) 여러 속성과 메서드를 조합해서 사용한다.

이벤트는 사용자와 상호작용해서 발생하는 사건 (마우스를 클릭, 더블클릭, 드래그앤드롭, 키보드 등)

1. v-on 디렉티브 : methods (main.js) 옵션 속성으로 이벤트를 연결
    이벤트타입(click,keyup,keydown,doubleclick)

1-1. 이벤트 핸들러에 이벤트 객체를 전달하지 않으면 이벤트 객체를 이벤트 핸들러가 처리하지 못한다.
    이벤트 객체와 값을 함꼐 사용하려면 $event와 값을 함꼐 넘겨주어야 한다.

1-2. modifier
    이벤트 처리 방식을 제어하는데 사용하는 기능
    modifier를 사용하면 DOM이벤트 동작을 변경하거나 긴으을 추가할 수 있다.

    (예제) keyup 이벤트로 enter키(13) 입력을 확인하면 별도의 동작을 취하도록 코드 작성

1-3. 뷰에서 이벤트와 함께 이해해야 하는 개념 : 반응성(reactivity)
    반응성이란 데이터의 변화를 감지하고 자동으로 화면 UI를 업데이트하는 기능
    -> 학습내용의 용어 등의 핵심 키워드를 정리해둔 자료를 보고 이해도 등을 결정

*뷰의 특징
    1. 뷰에서는 자체적으로 반응성 시스템으르사용해서 변화를 감지하도록 구성되어 있어, 우리가 반응성 시스템을 이용하여 구현해야 한다.
    2. 본래 웹은 새로운 값이 업데이트 될 때마다 전체를 렌더링하여 새로운 페이지가 뜨지만, 
        뷰는 반응성 때문에 변화된 해당 객체만을 감지하여 업데이트. 즉, 새로고침이 발생하지 않는다.

2. v-once 디렉티브 : 경우에 따라 값이 변경되어도 화면을 업데이트 하지 않을때 사용 (정적 디렉티브) -> 한 번 렌더링 한 후, 더 이상 감지하지 않음

3. v-memo : 렌더링 결과 저장 vue3.2 이상에서만 지원
            메모이제이선(memoization) 
            이전에 계산된 결과를 저장해 중복 계산을 피하고 실행속도를 향상시킬 때 사용하는 프로그래밍 기술
            ex. <template></template> 태그에서 반복적으로 렌더링 되는 요소에 v-memo

4. 폼(form) :  사용자로부터 데이터를 입력받은 요소들의 그룹이며 서버로 전송하기 위해 사용한다.
                프론트엔드에서 서버로 데이터를 전송하는 방법 2가지
                1. form 태그의 action속성에 지정된 경로를 전송하여 처리하는 방법
                    -<from action="/login_process"></from>
                
                2. 입력 값을 자바스크립트로 가져와서 AJAX(Asynchronous JavaScript And XML) 사용하여 전송하는 방법
                    -<form id="loginForm">
                        <input type="text" id="id"/>>
                        <input type="password" id="pwd"/>
                        <input type="submit"/>
                    </form>
                    <script>
                    event.preventDefault();
                    document.getElementById("loginForm").addEventListner('submit',function(event){
                        event.preventDefault();
                        //자바스크립트로 사용자로부터 입력받은 값을 받아온다.

                            const id = document.getElementById("id").value;
                            const password = document.getElementById("pwd").value;

                        //사용자 입력 데이터를 서버에 전송하기 위한 AJAX요청 만들기
                            const xhr = new XMLHttpRequest();
                            xhr.open('POST','/login_process'.true); //원할 때마다 우너하는 영역만 처리할 수 있게하는 비동기처리

                        //AJAX 응답에 대한 설정하기
                        ahr.onreadystatechange = function () {
                            if(xhr.readState === XMLHttpRequest.DONE){
                                if(xhr.statue === 200){
                                    const reapone = xhr.responeText;
                                    console.log(respone);
                                }
                                else{
                                    console.error('Request failed' + xhr.status);
                                }
                            }
                        };


                        // 데이터 전송 준비하기
                        const formData = new formData();
                        formData.append('id',id);
                        formData.append('password',pwd);

                        xhr.send(formData);
                    } );

                    </script>

    form1.html과 form2.html의 차이 
    모양은 같지만 처리하는 방식이 다름

    form2.html(AJAX 기술의 적용)
    ==> 사용자 입력 데이터를 전송하면서 페이지를 이동하지 않아도 되어서 데이터를 전송한 후, 처리 방법의 자유도가 높다.


5. v-model 디렉티브로 폼 요소를 다룬다.
    사용자가 입력한 요소의 값을 가져오는 것은 폼의 가장 기본적인 방법이다.
    뷰에서는 입력한 요소의 값을 가져올때 v-model 디렉티브를 이용한다.

    <script></script> 태그 영역에 정의한 데이터 속성과 
    <template></template> 태그 영역에서 html 요소가 양방향으로 서로 연결되어 데이터 속성의 값을 자동으로 업데이트 한다.
    이를 양방향 데이터 바인딩이라고 한다.

6. v-model 사용시 주의사항
    한 줄 입력 요소에 텍스트를 입력하면 v-model 디렉티브에 바인딩한 message 데이터 속성의 값이 실시간 변경

    한글이나 한자처럼 글자를 조합해서 단어를 만드는 문자는 IME를 사용하는데 딜레이가 되는 문제가 발생한다.
    이 문제를 해결하기 위해 이벤트 수동으로 처리(데이터르 업데이트)해 줘야 한다.
    실시간으로 글자 수를 확인해야 하는 기능 구현 시에는 v-model을 사용할 수 없다.

7. v-on 디렉티브와 이벤트 타입, 폼 요소와 연합하여 수동으로 처리하기
    -input 이벤트 처리
    -submit 이벤트 처리
    <form></form> 태그에 사용한 폼 요소의 데이터를 서버로 전송하는 시점에서 발생하는 이벤트

8.computed 속성
    옵션스 API에서 제공하는 속성 중 하나
    컴포넌트에서 자주 사용하는 데이터를 캐시(cache, 데이터를 메모리에 임시로 저장하는 것)
    애플리케이션 성능을 향상시킬때 사용

9. watch(감시자)속성
옵션스 API에서 제공하는 속성 중 하나: 데이터의 변경을 감시하고 변경이 감시될 때마다 특정 동작을 수행할 수 있다.

중요하고 인지해야할 핵심개념들이 무엇인지 자소서에 적어두기